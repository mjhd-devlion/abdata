
	abdata モジュール ver.1.1
	
	・reamde(説明書) 兼 specification(仕様書)
	
＠概要
	HSP3のモジュール変数機能を用いて、コンテナを実装してみたモジュールです。
	
	C++のSTLを若干意識しています。全然相手になりませんが(こっちが)。
	
＠内容
	すべてを一括して #include するには、all.asを使用するのが楽です。
	( いろいろ無駄なモノもくっついてきますが。 )
	
	・コンテナ
		stack     : スタック
		queue     : キュー
		list      : リスト
		tree      : 木構造
		dlinklist : 双方向連結リスト
		pair      : ペア(双)
	
	・その他
		value     : 要素型
	
	以下は、内部で使用するモジュールです。
	
		dlinkvalue
		mod_*.as
	
	以下は、ネタです。
	
		argstack : サンプル中サンプルを参照
	
＠命名規則
	ファイル名
		コンテナ
			構造名.as
			
		アルゴリズム
			alg_**.as
			
	モジュール空間
		abdata_構造名
		
	メンバ命令・関数
		構造名_関数名
		
		・先頭は小文字。
		・LowerCamelCase (2単語目以降、先頭だけ大文字)。
		
	メンバ変数
		・接頭辞 m を用いる。
	
	＊内部の命名規則について
		モジュールごとに作成時期に差があるため、
		実装部分の命名規則は二転三転しています。
		現在修正作業中……？
	
＠統一関数(interface)
	全モジュールに含まれる、共通の機能があります。
	これにより、どのコンテナを選んでもだいたい同じような使い方が可能です。
	
	・構築
		new
		
		内部で newmod 命令を呼び出します。
		
	・解体
		delete
		
		内部で delmod 命令を呼び出します。
		
	・要素数
		size()
		
	・完全消去
		clear
		
		全要素を消去し、初期状態に戻します。呼び出し元の変数は解体されません。
		
	・複製
		copy 複製元
		
		@ 複製元の変数は破壊されません。
		
	・連結
		chain 連結元
		
		@! pair にはありません。
		
	・交換
		exchange 交換先
		
		2つのコンテナに格納されているすべての要素を交換します。
		要素に順番がある場合は、順番が守られます。
		@! swap ではありません。
	
	・繰返子::初期化
		iterInit
		
		繰返子を初期化する。
		
	・繰返子::更新
		iterNext()
		
		繰返子を更新し、継続するなら it 変数に新しい値を格納して真を返し、
		継続しないなら偽を返す。
		
	＊その他の関数について
		可能な限り、次のような語を使用しています。
		
		要素挿入 -> insert
		要素削除 -> remove
		要素移動 -> move
		要素交換 -> swap
		要素設定 -> set    ( 変数使用 : setv )
		要素取得 -> get    ( 命令形式 : getv )
		要素参照 -> dup    ( クローン変数の作成 )
	
＠アルゴリズム(algorithm)
	アルゴリズムとは、abdata によって提供される各種コンテナに対して共通した処理
	を行うモジュールやその中の関数です。アルゴリズム関数を提供するファイルには、
	接頭辞 alg_ が憑いています。
	
	・繰返子アルゴリズム(@alg_iterate)
		IterateBegin コンテナ, 構造名 [, it変数]
			/* 処理 */
		IterateEnd
		
		コンテナの各要素について繰り返し処理を行います。途中で脱出する場合は、
		_break を使用してください。繰り返しの回数は IterateCnt で参照できます。
	
	※いい訳語ないかなぁ。統一○○がいいのだけれど……。
		>> アヒリズム(duck-ism) ってどうだろうか。もちろん由来は duck typing。
		>> よく考えたら訳語じゃないぞ、これ。正しくはアヒル関数か。
	
＠正常動作
	Windows XP sp3 HomeEdition 上での HSP3.2β(3, 4)での動作を確認しています。
	
＠著作権
	このモジュールに含まれるすべてのファイルの著作権は作者にありますが、
	このモジュールの使用・改変・配布については、自由に誰でも行えるものとします。
	
＠サポート
	・プログラ広場(http://prograpark.ninja-web.net/)
		作者の上大とかーみが運営する、プログラミング関係のサイトです。
		意見・要望・バグ報告などは、ここの掲示板にどしどし寄せてください。
		過疎ってますが、週に２、３回以上はチェックしていますので。
		
	・上大へのメール
		アドレスを入手するHSP3スクリプト( 超スパム対策 )
			dim chr, 21
				chr( 0) = $75, $65, $64, $61, $69, $5F, $69, $64, $40, $79
				chr(10) = $61, $68, $6F, $6F, $2E, $63, $6F, $2E, $6A, $70, 0
			sdim s, 32
			foreach chr
				poke s, cnt, chr(cnt)
			loop
			objmode 2
			mesbox s, ginfo(12), 25
		;	exec "mailto:"+ s, 16	// メーラを起動
			stop
		
＠更新履歴 (開発視点)
＊2009 07/28 (Tue)
	・Mo内フォルダのファイルを #include で結合できなかったバグを修正。
		といっても、abdata の中に移動させただけだが。
		なんでだろう……。
	
＊2009 07/11 (Sat)
	・alg_iter.as を追加。IterateBegin 〜 IterateEnd での画一的な反復が可能に。
	・↑に関して、繰返子関係の統一関数を追加。
		iterInit   : 繰返子の初期化を行う。
		iterNext() : 繰返子の更新を行う。継続なら真を返す。
	・IterateBegin~End が入れ子にできなかったバグを修正。
	・Pair_new が定義前に使われていたバグを修正。
	・setv, getv 系関数の引数の順番を「変数, その他……」に統一。
		・List, Queue が大きく影響を受けた。
		・DLList, Pair は変化無し。
	・mod_shiftArrayで、ArrayInsert すると要素が1つ消滅するという、
		初歩的なバグを修正。
	・Listで、insert するとmidListの番号がmidListの要素番号を指すという謎の
		状態になるバグを、要素配列の要素番号を指すように修正。
	・ver.1.1として公開＆バックアップ。
		でも資料不足相変わらず。
	
＊2009 07/09 (Thu)
	・all.as を追加。
	・Stack_pushvar → Stack_pushv の変更に修正し忘れがあったのを直した。
	・List_valid → List_isValid と変更したが、Queue_valid → Queue_isValid は
		修整されていなかった。他のListラッパーも同様。
	・木構造の繰返子でトラバースできるようにしようとしたが、断念。
	
＊2009 07/08 (Wed)
	・「＠繰返子関数」を追加。
	・この更新履歴を頑張って構築。
	・ver.1.0 として公開＆バックアップ。
		でもリファレンス不足。
	
＊2009 07/07 (Tue)
	・これ(readme)を作成し、abdata をフォルダ化 (前々からの悲願)。
	・統一関数を実装。同時に、公開メンバ関数の統一的な命名規則を導入。
		new, delete, size, clear, copy, chain, exchange
	・木構造を、インスタンスすべてを1つの静的配列で管理するように再実装。
	
＊2009 05/10 (Sun)
	・キューをリストのラッパーとして再実装。
	
＊2009 05/05 (Tue) 〜 05/10の間
	・リストを作成。
	
＊2009 04/12 (Sun)
	・木構造を階層表現に対応させた。
	
＊2009 04/08 (Wed)
	・ペアを作成。
	
＊2008 10/13 (Mon)
	・双方向連結リストを作成。
	・木構造を作成。
	
＊2008 09/06 (Sat)
	・スタックとキューのファイルを分割。
	
＊不明 (2008 09/04 〜 09/06 か？)
	・スタック＋キューを作成 (StrCalcの初回版に使用した、ハズ)。
	
Copyright(C) 2009 ue-dai.